- name: 创建非HA的相关目录
  file:
    path: "{{ item }}"
    state: directory
    directory_mode: 755
  with_items:
    - "{{ Manifests_path }}"
    - '/etc/systemd/system/kubelet.service.d'
    - "{{ kubelete_data_path }}"
    - "{{ kubernetes_log }}"
    - "{{ etcd_data_path }}"
    - '~/.kube/'

- name: 创建HA的相关目录
  file:
    path: "{{ item }}"
    state: directory
    directory_mode: 755
  with_items:
    - "{{ haproxy_path }}"
  when: (groups['Master'] | length)  != 1

- name: 分发非HA资源文件模板到每台Master
  template: src={{ item.src }} dest={{ item.dest }}/{{ item.src.split('.')[:-1]|join('.') }}
  with_items:
    - { src: 'kube-apiserver.yml.j2', dest: "{{ Manifests_path }}" }
    - { src: 'kube-controller-manager.yml.j2', dest: "{{ Manifests_path }}" }
    - { src: 'kube-scheduler.yml.j2', dest: "{{ Manifests_path }}" }
    - { src: 'etcd.yml.j2', dest: "{{ Manifests_path }}" }
    - { src: 'etcd.config.yml.j2', dest: "{{ etcd_path }}" }
    - { src: 'encryption.yml.j2', dest: "{{ kubernetes_path }}" }
    - { src: 'audit-policy.yml.j2', dest: "{{ kubernetes_path }}" }
    - { src: 'kubelet.service.j2', dest: '/lib/systemd/system' }
    - { src: '10-kubelet.conf.j2', dest: '/etc/systemd/system/kubelet.service.d' }

- name: 分发HA资源文件模板到每台Master
  template: src={{ item.src }} dest={{ item.dest }}/{{ item.src.split('.')[:-1]|join('.') }}
  with_items:
    - { src: 'haproxy.yml.j2', dest: "{{ Manifests_path }}" }
    - { src: 'keepalived.yml.j2', dest: "{{ Manifests_path }}" }
    - { src: 'haproxy.cfg.j2', dest: "{{ haproxy_path }}" }
  when: (groups['Master'] | length)  != 1

- name: 设置kubectl补全脚本
  shell: kubectl completion bash > /etc/bash_completion.d/kubectl

- name: 启动kubelet
  shell: systemctl enable kubelet.service && systemctl start kubelet.service

- name: 设置admin kubeconfig
  shell: /usr/bin/cp {{ kubernetes_path }}/admin.conf ~/.kube/config

- name: 等待拉取镜像启动staticPod
  shell: |
    :;{{ kubectl_path }}/kubectl -n kube-system get pod | awk '/kube-apiserver.+Running/{a++}END{print a}'
  run_once: true
  register: check_apiserver
  until: check_apiserver.stdout == (groups['Master'] | length)
  retries: 12
  delay: 10
  ignore_errors: true
